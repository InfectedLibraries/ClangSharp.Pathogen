<!-- ==============================================================================================
This file enforces consistent version conventions for ClangSharp.Pathogen packages.
Specifically, it appends the build metadata (the parts after the +)
It also handles persisting and resetting the DevelopmentVersionNumber.
See Versioning.props for details.
=============================================================================================== -->
<Project>
  <!-- Target to retrieve LLVM's source control revision from SourceLink -->
  <Target Name="DetermineLlvmSourceRevision">
    <PropertyGroup>
      <LlvmSourceRevision Condition="'%(SourceRoot.NestedRoot)' == 'external/llvm-project/'">%(SourceRoot.RevisionId)</LlvmSourceRevision>
    </PropertyGroup>
  </Target>

  <!--
    Validates version number logic and appends build metadata to the version number
    We skip this during design-time builds because A) it's unecessary and B) Git information won't be available from SourceLink.
  -->
  <Target Name="ValidateAndAppendBuildMetadataToVersionNumber"
          BeforeTargets="GetAssemblyVersion;GenerateNuspec"
          DependsOnTargets="InitializeSourceControlInformation;DetermineLlvmSourceRevision"
          Condition="'$(DesignTimeBuild)' != 'true'">
    <!-- Source control information must be supported -->
    <Error Text="Source control information must be available." Condition="'$(SourceControlInformationFeatureSupported)' != 'true'" />

    <!-- Complain when the LLVM source revision is missing when it's needed -->
    <Error Text="Could not determine the source code revision used for LLVM." Condition="'$(LlvmSourceRevision)' == '' and '$(IncludeLlvmSourceRevisionInVersion)' == 'true'" />

    <!-- Per-kind validation -->
    <Error Text="ContinousIntegrationRunNumber must be specified for CiBuild releases!" Condition="'$(ReleaseKind)' == 'CiBuild' and '$(ContinousIntegrationRunNumber)' == ''" />
    <Error Text="PreviewReleaseVersion must be specified for preview releases!" Condition="'$(ReleaseKind)' == 'PreviewRelease' and '$(PreviewReleaseVersion)' == ''" />
    <Error Text="Don't use non-release configuration for release builds!" Condition="'$(ReleaseKind)' == 'FullRelease' and '$(Configuration)' != 'Release'" />
    <Warning Text="Forks should not create full release builds!" Condition="'$(ReleaseKind)' == 'FullRelease' and '$(_ForkNameWithDot)' != ''" />

    <!-- Append the build metadata -->
    <PropertyGroup>
      <_LlvmVersionSuffix>LLVM-$(LlvmBaseVersion)</_LlvmVersionSuffix>
      <_LlvmVersionSuffix Condition="'$(IncludeLlvmSourceRevisionInVersion)' == 'true'">$(_LlvmVersionSuffix).$(LlvmSourceRevision)</_LlvmVersionSuffix>

      <InformationalVersion>$(Version)+$(SourceRevisionId).$(_LlvmVersionSuffix)</InformationalVersion>

      <!-- Shove the fork name in the build metadata when it's present for full releases. -->
      <InformationalVersion Condition="'$(ReleaseKind)' == 'FullRelease' and '$(ForkName)' != ''">$(InformationalVersion).$(ForkName)</InformationalVersion>

      <!-- Apply the updated version to NuGet -->
      <!--
        This is disabled until https://github.community/t/bug-nuget-support-build-metadata-properly/117606/3 is resolved
      <PackageVersion>$(InformationalVersion)</PackageVersion>
      -->
    </PropertyGroup>
  </Target>

  <!-- Handle persisting and resetting of DevelopmentVersionNumber -->
  <Target Name="PersistDevelopmentVersionNumber" BeforeTargets="Build;Restore;Pack" Condition="'$(DevelopmentVersionNumberWasGenerated)' == 'true' and '$(ReleaseKind)' == 'Development'">
    <WriteLinesToFile Lines="$(DevelopmentVersionNumber)" File="$(DevelopmentVersionCacheFilePath)" Overwrite="True" />
    <ItemGroup>
      <FileWrites Include="$(DevelopmentVersionCacheFilePath)" />
    </ItemGroup>
  </Target>

  <Target Name="ResetDevelopmentVersionNumber" AfterTargets="Pack;Clean" Condition="'$(ReleaseKind)' == 'Development' and Exists('$(DevelopmentVersionCacheFilePath)')">
    <Delete Files="$(DevelopmentVersionCacheFilePath)" />
  </Target>
</Project>
